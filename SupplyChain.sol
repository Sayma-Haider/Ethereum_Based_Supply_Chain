// SPDX-License-Identifier: MIT
pragma solidity >=0.4.24;

// inherited contracts
import "./Farmer.sol";
import "./Distributor.sol";
import "./Retailer.sol";
import "./Consumer.sol";

// Define a contract 'Supplychain'
contract SupplyChain is Farmer, Distributor, Retailer, Consumer {
    // Define 'owner'
    address owner;

    // Define a variable called 'upc' for Universal Product Code (UPC)
    uint256 upc;

    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint256 skunit;

    // Define a price
    uint256 price;

    string hashes;

    // Define a public mapping 'items' that maps the UPC to an Item.
    mapping(uint256 => Item) items;

    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
    // that track its journey through the supply chain -- to be sent from DApp.
    //mapping(uint256 => string[]) itemsHistory;

    // Define enum 'State' with the following values:
    enum State {
        Harvested, //0
        PurchasedByDistributor, //1
        ShippedByFarmer, // 2
        ReceivedByDistributor, // 3
        PurchasedByRetailer, // 4
        ShippedByDistributor, //5
        ReceivedByRetailer, // 6
        PurchasedByConsumer, // 7
        ShippedByRetailer, // 8
        ReceivedByConsumer // 9
    }

    State constant defaultState = State.Harvested;

    // Define a struct 'Item' with the following fields:
    struct Item {
        uint256 sku; // Stock Keeping Unit (SKU)
        uint256 upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through 8 stages
        address farmerID; // Metamask-Ethereum address of the Farmer
        string farmerName; // Farmer Name
        string farmerInformation; // Farmer Information
        string farmerLatitude; // Farm Latitude
        string farmerLongitude; // Farm Longitude
        uint256 productID; // Product ID potentially a combination of upc + sku
        uint256 harvestDate;
        string productNotes; // Product Notes
        uint256 productPrice; // Product Price
        State itemState; // Product State as represented in the enum above
        address distributorID; // Metamask-Ethereum address of the Distributor
        address retailerID; // Metamask-Ethereum address of the Retailer
        address consumerID; // Metamask-Ethereum address of the Consumer
    }

    // Define 8 events with the same 8 state values and accept 'upc' as input argument
    event Harvested(uint256 upc);
    //event ProcessedAndPacked(uint256 upc);
    event PurchasedByDistributor(uint256 upc);
    event ShippedByFarmer(uint256 upc);
    event ReceivedByDistributor(uint256 upc);
    event PurchasedByRetailer(uint256 upc);
    event ShippedByDistributor(uint256 upc);
    event ReceivedByRetailer(uint256 upc);
    event PurchasedByConsumer(uint256 upc);
    event ShippedByRetailer(uint256 upc);
    event ReceivedByConsumer(uint256 upc);

    // Define a modifer that checks to see if msg.sender == owner of the contract
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    // Define a modifer that verifies the Caller
    modifier verifyCaller(address _address) {
        require(msg.sender == _address);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Harvested
    modifier harvested(uint256 _upc) {
        require(items[_upc].itemState == State.Harvested);
        _;
    }

    modifier purchasedByDistributor(uint256 _upc) {
        require(items[_upc].itemState == State.PurchasedByDistributor);
        _;
    }

    modifier shippedByFarmer(uint256 _upc) {
        require(items[_upc].itemState == State.ShippedByFarmer);
        _;
    }

    modifier receivedByDistributor(uint256 _upc) {
        require(items[_upc].itemState == State.ReceivedByDistributor);
        _;
    }

    modifier purchasedByRetailer(uint256 _upc) {
        require(items[_upc].itemState == State.PurchasedByRetailer);
        _;
    }

    modifier shippedByDistributor(uint256 _upc) {
        require(items[_upc].itemState == State.ShippedByDistributor);
        _;
    }

    modifier receivedByRetailer(uint256 _upc) {
        require(items[_upc].itemState == State.ReceivedByRetailer);
        _;
    }

    modifier purchasedByConsumer(uint256 _upc) {
        require(items[_upc].itemState == State.PurchasedByConsumer);
        _;
    }

    modifier shippedByRetailer(uint256 _upc) {
        require(items[_upc].itemState == State.ShippedByRetailer);
        _;
    }

    modifier receivedByConsumer(uint256 _upc) {
        require(items[_upc].itemState == State.ReceivedByConsumer);
        _;
    }

    // In the constructor set 'owner' to the address that instantiated the contract
    // and set 'sku' to 1
    // and set 'upc' to 1
    constructor() public payable {
        owner = msg.sender;
        skunit = 1;
        upc = 1;
        price = 1;
    }

    /*
  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(owner);
    }
  }*/

    // Define a function 'addItem' that allows a Farmer to mark an item 'Harvested'
    function addItem(
        uint256 _upc,
        address _farmerID,
        string memory _farmerName,
        string memory _farmerInformation,
        string memory _farmerLatitude,
        string memory _farmerLongitude,
        string memory _productNotes,
        uint256 _productPrice,
        address _distributorID,
        address _retailerID,
        address _consumerID
    ) public onlyFarmer {
        // Add the new item as part of farming
        Item memory farm = Item({
            sku: skunit,
            upc: _upc,
            ownerID: _farmerID,
            farmerID: _farmerID,
            farmerName: _farmerName,
            farmerInformation: _farmerInformation,
            farmerLatitude: _farmerLatitude,
            farmerLongitude: _farmerLongitude,
            productID: skunit + _upc,
            harvestDate: block.timestamp,
            productNotes: _productNotes,
            productPrice: _productPrice,
            itemState: State.Harvested,
            distributorID: _distributorID,
            consumerID: _consumerID,
            retailerID: _retailerID
            /*distributorID: address(0),
            consumerID: address(0),
            retailerID: address(0)*/
        });
        items[_upc] = farm;

        // Increment sku
        skunit = skunit + 1;

        // Emit the appropriate event
        emit Harvested(_upc);
    }

    ///@dev STEP 2 : Purchase of manufactured product by Third Party.
    function purchaseByDistributor(uint256 _upc, uint256 _price)
        public
        harvested(_upc)
        onlyDistributor
    {
        items[_upc].productPrice = _price;
        items[_upc].distributorID = msg.sender;
        items[_upc].itemState = State.PurchasedByDistributor;

        emit PurchasedByDistributor(_upc);
    }

    ///@dev STEP 3 : Shipping of purchased product to Third Party.
    function shipToDistributor(uint256 _upc)
        public
        verifyCaller(items[_upc].farmerID)
        onlyFarmer
        purchasedByDistributor(_upc)
    {
        items[_upc].itemState = State.ShippedByFarmer;

        emit ShippedByFarmer(_upc);
    }

    ///@dev STEP 4 : Received the purchased product shipped by Farmer.
    function receiveByDistributor(uint256 _upc)
        public
        shippedByFarmer(_upc)
        verifyCaller(items[_upc].distributorID)
        onlyDistributor
    {
        items[_upc].ownerID = msg.sender;
        items[_upc].itemState = State.ReceivedByDistributor;

        emit ReceivedByDistributor(_upc);
    }

    ///@dev STEP 5 : Purchase of a product at third party by Consumer.
    function purchaseByRetailer(uint256 _upc)
        public
        verifyCaller(items[_upc].retailerID)
        receivedByDistributor(_upc)
        onlyRetailer
    {
        items[_upc].retailerID = msg.sender;
        items[_upc].itemState = State.PurchasedByConsumer;

        emit PurchasedByRetailer(_upc);
    }

    ///@dev STEP 7 : Shipping of product by third party purchased by consumer.
    function shipByDistributor(uint256 _upc)
        public
        verifyCaller(items[_upc].distributorID)
        verifyCaller(items[_upc].ownerID)
    //purchasedByRetailer(_upc)
    {
        items[_upc].itemState = State.ShippedByDistributor;

        emit ShippedByDistributor(_upc);
    }

    ///@dev STEP 8 : Receiveing of product by delivery hub purchased by consumer.
    function receiveByRetailer(uint256 _upc)
        public
        shippedByDistributor(_upc)
        verifyCaller(items[_upc].retailerID)
        onlyRetailer
    {
        items[_upc].ownerID = msg.sender;
        items[_upc].itemState = State.ReceivedByRetailer;

        emit ReceivedByRetailer(_upc);
    }

    function purchaseByConsumer(uint256 _upc)
        public
        receivedByRetailer(_upc)
        verifyCaller(items[_upc].consumerID)
    //onlyConsumer
    {
        items[_upc].consumerID = msg.sender;
        items[_upc].itemState = State.PurchasedByConsumer;

        emit PurchasedByConsumer(_upc);
    }

    ///@dev STEP 9 : Shipping of product by delivery hub purchased by consumer.
    function shipByRetailer(uint256 _upc)
        public
        purchasedByConsumer(_upc)
        //verifyCaller(items[_upc].ownerID)
        verifyCaller(items[_upc].retailerID)
    //onlyRetailer
    {
        items[_upc].itemState = State.ShippedByRetailer;

        emit ShippedByRetailer(_upc);
    }

    ///@dev STEP 10 : Shipping of product by delivery hub purchased by consumer.
    function receiveByConsumer(uint256 _upc)
        public
        shippedByRetailer(_upc)
        verifyCaller(items[_upc].consumerID)
    //onlyConsumer
    {
        items[_upc].ownerID = msg.sender;
        items[_upc].itemState = State.ReceivedByConsumer;

        emit ReceivedByConsumer(_upc);
    }

    function fetchState(uint256 _upc)
        public
        view
        returns (string memory itemState)
    {
        uint256 itemStateN;
        itemStateN = uint256(items[_upc].itemState);

        if (itemStateN == 0) itemState = "Harvested";
        else if (itemStateN == 1) itemState = "PurchasedByDistributor";
        else if (itemStateN == 2) itemState = "ShippedByFarmer";
        else if (itemStateN == 3) itemState = "ReceivedByDistributor";
        else if (itemStateN == 4) itemState = "PurchasedByRetailer";
        else if (itemStateN == 5) itemState = "ShippedByDistributor";
        else if (itemStateN == 6) itemState = "ReceivedByRetailer";
        else if (itemStateN == 7) itemState = "PurchasedByConsumer";
        else if (itemStateN == 8) itemState = "ShippedByRetailer";
        else itemState = "ReceivedByConsumer";

        return (itemState);
    }

    function fetchOwnerHistory(uint256 _upc)
        public
        view
        returns (address ownerID)
    {
        ownerID = items[_upc].ownerID;

        return (ownerID);
    }

    // Define a function 'fetchItemBufferOne' that fetches the data
    function fetchHarvestDetails(uint256 _upc)
        public
        view
        returns (
            uint256 itemSKU,
            uint256 itemUPC,
            address ownerID,
            address farmerID,
            string memory farmerName,
            string memory farmerInformation,
            string memory farmerLatitude,
            string memory farmerLongitude
        )
    {
        // Assign values to the 8 parameters
        itemSKU = items[_upc].sku;
        itemUPC = items[_upc].upc;
        ownerID = items[_upc].ownerID;
        farmerID = items[_upc].farmerID;
        farmerName = items[_upc].farmerName; //INFO:symExec:SupplyChain.sol:363:9: Warning: Integer Underflow.
        farmerInformation = items[_upc].farmerInformation;
        farmerLatitude = items[_upc].farmerLatitude;
        farmerLongitude = items[_upc].farmerLongitude;

        return (
            itemSKU,
            itemUPC,
            ownerID,
            farmerID,
            farmerName,
            farmerInformation,
            farmerLatitude,
            farmerLongitude
        );
    }

    // Define a function 'fetchItemBufferTwo' that fetches the data
    function fetchProductDetails(uint256 _upc)
        public
        view
        returns (
            uint256 itemSKU,
            uint256 itemUPC,
            uint256 productID,
            uint256 harvestDate,
            string memory productNotes,
            uint256 productPrice,
            uint256 itemState,
            address distributorID,
            address retailerID,
            address consumerID
        )
    {
        // Assign values to the 9 parameters
        itemSKU = items[_upc].sku;
        itemUPC = items[_upc].upc;
        productID = items[_upc].productID;
        productNotes = items[_upc].productNotes;
        productPrice = items[_upc].productPrice;
        itemState = uint256(items[_upc].itemState);
        distributorID = items[_upc].distributorID;
        retailerID = items[_upc].retailerID;
        consumerID = items[_upc].consumerID;

        return (
            itemSKU,
            itemUPC,
            productID,
            harvestDate,
            productNotes,
            productPrice,
            itemState,
            distributorID,
            retailerID,
            consumerID
        );
    }

    function getProductNotes(uint256 _upc) public view returns (string memory) {
        return items[_upc].productNotes;
    }
}
